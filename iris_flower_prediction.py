# -*- coding: utf-8 -*-
"""iris-flower-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lHIkX-TwTyZalu02a4cvxvCk6N5LpR57

# **0. Import Necessary Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **1. Load Dataset**"""

data = sns.load_dataset('iris')

"""# **2. Data Understanding**

## **2.0. Display Dataset's First Five Rows**
"""

data.head()

"""## **2.1. Display Dataset's Last Five Rows**"""

data.tail()

"""## **2.2. Display Dataset's Basic Information**"""

data.info()

"""# **3. Exploratory Data Analysis**

## **3.0. Display Dataset's Statistics Information**
"""

data.describe()

"""## **3.1. Display Dataset's Distribution Data**"""

sns.set_style('darkgrid')

numerical_columns = data.select_dtypes('number').columns

for column in numerical_columns:
    plt.figure(figsize=(16, 12))
    sns.histplot(data=data, x=data[column], kde=True)
    plt.title(f'Histplot of {column}')
    plt.show()

"""## **3.2. Display Target Variable's Countplot**"""

plt.figure(figsize=(16, 12))
sns.countplot(data=data, x=data['species'])
plt.title('Countplot of species')
plt.plot()

"""# **4. Data Preprocessing**

## **4.0. Display Dataset's Missing Values**
"""

data.isna().sum()

"""## **4.1. Display Dataset's Duplicated Values**"""

data.duplicated().sum()

"""# **5. Model Building**

## **5.0. Data Splitting**
"""

from sklearn.model_selection import train_test_split

X = data.drop('species', axis=1)
y = data['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## **5.1. Model Development**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

training_accuracy = accuracy_score(y_train, y_train_pred)
testing_accuracy = accuracy_score(y_test, y_test_pred)

print(f'Training Set Accuracy: {training_accuracy * 100:.2f}%')
print(f'Testing Set Accuracy: {testing_accuracy * 100:.2f}%\n')

training_report = classification_report(y_train, y_train_pred)
testing_report = classification_report(y_test, y_test_pred)

print(f'Training Set Report:\n{training_report}\n')
print(f'Testing Set Report:\n{testing_report}')

"""## **5.2. Save Model into Joblib File**"""

import joblib

filename = 'iris-model.joblib'
joblib.dump(model, filename)